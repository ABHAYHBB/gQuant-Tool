import pandas as pd
import numpy as np

# Replace with the actual path to your Excel file
file_path = 'GEO_with_NA.xlsx'

# Specify the sheet number you want to load, for example, sheet number 2 (Python is zero-indexed)
sheet_number = 2  # If the sheet is the third sheet in the Excel file

# Load the data from the specified sheet into a pandas DataFrame without considering the first row as header
df = pd.read_excel(file_path, sheet_name=sheet_number, header=None)  # Subtracting 1 since Python is zero-indexed

# Optionally, if you want to assign the first row as column names manually:
df.columns = df.iloc[0]  # Set the first row as column names
df = df.drop(df.index[0])  # Drop the first row as it's now set as the column names

# Define a function to check if a value is not a number (NaN or any non-numeric type)
def is_not_number(x):
    return not (isinstance(x, (int, float)) or x is np.nan)

# Apply the function across the DataFrame
not_number = df.applymap(is_not_number)

# Count 'True' values returned by the function (which indicate non-numeric values)
not_number_count = not_number.sum()

# Count the numeric and non-missing values in each column
numeric_and_available_count = df.applymap(lambda x: isinstance(x, (int, float)) and not pd.isna(x)).sum()

# Calculate the ratio of available values to missing values for each column
available_to_missing_ratio = numeric_and_available_count / not_number_count.replace(0, np.nan)  # Replace 0 with NaN to avoid division by zero

# Combine the counts and ratios into a single DataFrame
results = pd.DataFrame({
    'Column': df.columns,
    'Available_Count': numeric_and_available_count,
    'Missing_Count': not_number_count,
    'Available_to_Missing_Ratio': available_to_missing_ratio
})

# Set the column names as the index
results.set_index('Column', inplace=True)

# Subset columns where the ratio of available to missing values is 8 or greater

df1 = results[(results['Available_to_Missing_Ratio'] >= 8) | (results['Missing_Count'] == 0)]
# Print the overall results
print("Overall Results:")
print(results)

# Print the subset of columns with 8 or more available values per missing value
print("\nColumns with 8 or more available values per missing value:")
print(df1)
